From de3063d36326506733ad4104abb6b004a1f01175 Mon Sep 17 00:00:00 2001
From: Hiroshi Hatake <hatake@clear-code.com>
Date: Wed, 9 Jan 2019 11:20:44 +0900
Subject: [PATCH] Inject configurable reftest-wait class script in marionette

---
 testing/marionette/listener.js | 24 ++++++++++++++++++++----
 1 file changed, 20 insertions(+), 4 deletions(-)

diff --git a/testing/marionette/listener.js b/testing/marionette/listener.js
index d55fd314b..05cd8b00e 100644
--- a/testing/marionette/listener.js
+++ b/testing/marionette/listener.js
@@ -13,6 +13,7 @@ const winUtil = content.QueryInterface(Ci.nsIInterfaceRequestor)
 ChromeUtils.import("resource://gre/modules/FileUtils.jsm");
 ChromeUtils.import("resource://gre/modules/Log.jsm");
 ChromeUtils.import("resource://gre/modules/Services.jsm");
+ChromeUtils.import("resource://gre/modules/Preferences.jsm");
 
 ChromeUtils.import("chrome://marionette/content/accessibility.js");
 ChromeUtils.import("chrome://marionette/content/action.js");
@@ -64,6 +65,7 @@ const SUPPORTED_STRATEGIES = new Set([
   element.Strategy.TagName,
   element.Strategy.XPath,
 ]);
+const PREF_REFTEST_WAIT = "reftest.wait.milliseconds";
 
 Object.defineProperty(this, "capabilities", {
   get() {
@@ -1615,6 +1617,14 @@ function flushRendering() {
   return windowUtils.isMozAfterPaintPending;
 }
 
+function injectWaitScript(document, waitSeconds) {
+  document.documentElement.classList.add("reftest-wait-ex");
+
+  document.defaultView.setTimeout(() => {
+    document.documentElement.classList.remove("reftest-wait-ex");
+  }, waitSeconds);
+}
+
 async function reftestWait(url, remote) {
   let win = curContainer.frame;
   let document = curContainer.frame.document;
@@ -1624,6 +1634,7 @@ async function reftestWait(url, remote) {
 
 
   let reftestWait = false;
+  let reftestWaitSeconds = Preferences.get(PREF_REFTEST_WAIT) || 1000;
 
   if (document.location.href !== url || document.readyState != "complete") {
     logger.debug(truncate`Waiting for page load of ${url}`);
@@ -1633,7 +1644,10 @@ async function reftestWait(url, remote) {
             event.target.location.href === url) {
           win = curContainer.frame;
           document = curContainer.frame.document;
-          reftestWait = document.documentElement.classList.contains("reftest-wait");
+          injectWaitScript(document, reftestWaitSeconds);
+          reftestWait =
+               document.documentElement.classList.contains("reftest-wait")
+            || document.documentElement.classList.contains("reftest-wait-ex");
           removeEventListener("load", maybeResolve, {once: true});
           win.setTimeout(resolve, 0);
         }
@@ -1643,18 +1657,20 @@ async function reftestWait(url, remote) {
   } else {
     // Ensure that the event loop has spun at least once since load,
     // so that setTimeout(fn, 0) in the load event has run
-    reftestWait = document.documentElement.classList.contains("reftest-wait");
+    reftestWait =
+         document.documentElement.classList.contains("reftest-wait")
+      || document.documentElement.classList.contains("reftest-wait-ex");
     await new Promise(resolve => win.setTimeout(resolve, 0));
   }
 
   let root = document.documentElement;
   if (reftestWait) {
     // Check again in case reftest-wait was removed since the load event
-    if (root.classList.contains("reftest-wait")) {
+    if (root.classList.contains("reftest-wait") || root.classList.contains("reftest-wait-ex")) {
       logger.debug("Waiting for reftest-wait removal");
       await new Promise(resolve => {
         let observer = new win.MutationObserver(() => {
-          if (!root.classList.contains("reftest-wait")) {
+          if (!root.classList.contains("reftest-wait") && !root.classList.contains("reftest-wait-ex")) {
             observer.disconnect();
             logger.debug("reftest-wait removed");
             win.setTimeout(resolve, 0);
-- 
2.11.0

