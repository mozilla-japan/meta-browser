diff --git a/widget/gtk/mozcontainer.cpp b/widget/gtk/mozcontainer.cpp
--- a/widget/gtk/mozcontainer.cpp
+++ b/widget/gtk/mozcontainer.cpp
@@ -213,6 +213,8 @@ moz_container_init (MozContainer *contai
       container->subsurface = nullptr;
       container->eglwindow = nullptr;
       container->committed = false;
+      container->egl_window_width = -1;
+      container->egl_window_height = -1;
 
       GdkDisplay *gdk_display = gtk_widget_get_display(GTK_WIDGET(container));
       if (GDK_IS_WAYLAND_DISPLAY (gdk_display)) {
@@ -459,11 +461,6 @@ moz_container_size_allocate (GtkWidget  
         gdk_window_get_position(gtk_widget_get_window(widget), &x, &y);
         wl_subsurface_set_position(container->subsurface, x, y);
     }
-    if (container->eglwindow) {
-        wl_egl_window_resize(container->eglwindow,
-                             allocation->width, allocation->height,
-                             0, 0);
-    }
 #endif
 }
 
@@ -599,10 +596,13 @@ moz_container_get_wl_egl_window(MozConta
             return nullptr;
 
       GdkWindow *window = gtk_widget_get_window(GTK_WIDGET(container));
+      gint width = gdk_window_get_width(window);
+      gint height = gdk_window_get_height(window);
       container->eglwindow
-            = wl_egl_window_create(wlsurf,
-                                   gdk_window_get_width(window),
-                                   gdk_window_get_height(window));
+          = wl_egl_window_create(wlsurf, width, height);
+
+      container->egl_window_width = width;
+      container->egl_window_height = height;
     }
     return container->eglwindow;
 }
@@ -612,4 +612,29 @@ moz_container_has_wl_egl_window(MozConta
 {
     return container->eglwindow ? true : false;
 }
+
+void
+moz_container_adjust_wl_egl_window_size(MozContainer *container)
+{
+    if (!container->eglwindow)
+        return;
+
+    GtkWidget *widget = GTK_WIDGET(container);
+    GtkAllocation allocation;
+    gtk_widget_get_allocation(widget, &allocation);
+
+    if (allocation.width  != container->egl_window_width ||
+        allocation.height != container->egl_window_height) {
+
+        container->egl_window_width  = allocation.width;
+        container->egl_window_height = allocation.height;
+        wl_egl_window_resize(container->eglwindow,
+                             container->egl_window_width,
+                             container->egl_window_height,
+                             0, 0);
+
+        gdk_window_invalidate_rect(gtk_widget_get_window(widget),
+                                   nullptr, FALSE);
+    }
+}
 #endif
diff --git a/widget/gtk/mozcontainer.h b/widget/gtk/mozcontainer.h
--- a/widget/gtk/mozcontainer.h
+++ b/widget/gtk/mozcontainer.h
@@ -74,6 +74,9 @@ struct _MozContainer
     struct wl_subsurface    *subsurface;
     struct wl_egl_window    *eglwindow;
     gboolean                 committed;
+    gint egl_window_width;
+    gint egl_window_height;
+
 #endif
 };
 
@@ -99,6 +102,7 @@ void       moz_container_move          (
 struct wl_surface* moz_container_get_wl_surface(MozContainer *container);
 struct wl_egl_window* moz_container_get_wl_egl_window(MozContainer *container);
 gboolean moz_container_has_wl_egl_window(MozContainer *container);
+void     moz_container_adjust_wl_egl_window_size(MozContainer *container);
 #endif
 
 #endif /* __MOZ_CONTAINER_H__ */
diff --git a/widget/gtk/nsWindow.cpp b/widget/gtk/nsWindow.cpp
--- a/widget/gtk/nsWindow.cpp
+++ b/widget/gtk/nsWindow.cpp
@@ -342,6 +342,25 @@ private:
     TimeStamp  mAsyncUpdateStart;
 };
 
+class nsWindowDidCompositeObserver final : public DidCompositeObserver
+{
+public:
+  nsWindowDidCompositeObserver(MozContainer *aContainer)
+    : mContainer(aContainer)
+  {
+  }
+
+  ~nsWindowDidCompositeObserver() {
+  }
+
+  void DidComposite() override {
+    moz_container_adjust_wl_egl_window_size(mContainer);
+  }
+
+private:
+  MozContainer* mContainer;
+};
+
 } // namespace mozilla
 
 static NS_DEFINE_IID(kCDragServiceCID,  NS_DRAGSERVICE_CID);
@@ -482,6 +501,9 @@ nsWindow::nsWindow()
     mPendingConfigures = 0;
     mCSDSupportLevel = CSD_SUPPORT_NONE;
     mDrawInTitlebar = false;
+#ifdef MOZ_WAYLAND
+    mDidCompositeObserver = nullptr;
+#endif
 }
 
 nsWindow::~nsWindow()
@@ -2089,6 +2111,14 @@ nsWindow::OnExposeEvent(cairo_t *cr)
     if (GetLayerManager()->AsKnowsCompositor() && mCompositorSession) {
         // We need to paint to the screen even if nothing changed, since if we
         // don't have a compositing window manager, our pixels could be stale.
+#ifdef MOZ_WAYLAND
+        if (mContainer) {
+            if (!mDidCompositeObserver) {
+                mDidCompositeObserver = MakeUnique<nsWindowDidCompositeObserver>(mContainer);
+            }
+            GetLayerManager()->AddDidCompositeObserver(mDidCompositeObserver.get());
+        }
+#endif
         GetLayerManager()->SetNeedsComposite(true);
         GetLayerManager()->SendInvalidRegion(region.ToUnknownRegion());
     }
diff --git a/widget/gtk/nsWindow.h b/widget/gtk/nsWindow.h
--- a/widget/gtk/nsWindow.h
+++ b/widget/gtk/nsWindow.h
@@ -86,6 +86,7 @@ class gfxPattern;
 namespace mozilla {
 class TimeStamp;
 class CurrentX11TimeGetter;
+class nsWindowDidCompositeObserver;
 }
 
 class nsWindow final : public nsBaseWidget
@@ -650,6 +651,7 @@ private:
     RefPtr<mozilla::widget::IMContextWrapper> mIMContext;
 
     mozilla::UniquePtr<mozilla::CurrentX11TimeGetter> mCurrentTimeGetter;
+    mozilla::UniquePtr<mozilla::nsWindowDidCompositeObserver> mDidCompositeObserver;
     static CSDSupportLevel sCSDSupportLevel;
 };
 
