From 433bda585b2e82404adf3ea74cc2af7a8d7ca6de Mon Sep 17 00:00:00 2001
From: Hiroshi Hatake <hatake@clear-code.com>
Date: Thu, 21 Jun 2018 11:29:57 +0900
Subject: [PATCH] Make the window fullscreen by default

This patch makes browser window fullscreen by default.
In ESR52, EGL patch for Wayland had not work well when window frame
exists,
In ESR60, EGL patch for Wayland works well in same situation.
So, we can remove a part of disabling window frame.

This patch is based on
https://github.com/webdino/meta-browser/blob/firefox-52esr/recipes-mozilla/firefox/firefox/wayland/gem/egl/frameless.patch.

In ESR60, FullScreen.toggle() does not conceal toolbox.
So, we should do a small fix to fix this behavior.

* document.getElementById("navigator-toolbox").collapse = true or false.

Original patch author is Takuro Ashie <ashie@clear-code.com>.

Signed-off-by: Hiroshi Hatake <hatake@clear-code.com>
---
 browser/app/profile/firefox.js                     |  1 +
 .../content/browser-fullScreenAndPointerLock.js    | 12 +++++++++--
 browser/base/content/browser-sets.inc              |  2 ++
 browser/base/content/browser.xul                   |  9 +++++---
 browser/components/sessionstore/SessionStore.jsm   | 25 ++++++++++++++++++++++
 5 files changed, 44 insertions(+), 5 deletions(-)

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
index 45389ca98854..53ee056c17ce 100644
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -281,6 +281,7 @@ pref("browser.warnOnQuit", true);
 // might still show the window closing dialog with showQuitWarning == false.
 pref("browser.showQuitWarning", false);
 pref("browser.fullscreen.autohide", true);
+pref("browser.fullscreen.animate", false);
 pref("browser.overlink-delay", 80);
 
 #ifdef UNIX_BUT_NOT_MAC
diff --git a/browser/base/content/browser-fullScreenAndPointerLock.js b/browser/base/content/browser-fullScreenAndPointerLock.js
index f2d4b21846ec..89599efba1cf 100644
--- a/browser/base/content/browser-fullScreenAndPointerLock.js
+++ b/browser/base/content/browser-fullScreenAndPointerLock.js
@@ -10,6 +10,7 @@ var PointerlockFsWarning = {
 
   _element: null,
   _origin: null,
+  _navigatorToolBox: null,
 
   /**
    * Timeout object for managing timeout request. If it is started when
@@ -268,8 +269,9 @@ var FullScreen = {
       window.messageManager.addMessageListener(type, this);
     }
 
-    if (window.fullScreen)
-      this.toggle();
+    window.fullScreen = true;
+    this._navigatorToolBox = document.getElementById("navigator-toolbox");
+    this.toggle();
   },
 
   uninit() {
@@ -289,6 +291,11 @@ var FullScreen = {
 
   toggle() {
     var enterFS = window.fullScreen;
+    if (enterFS) {
+      this._navigatorToolBox.collapsed = true;
+    } else {
+      this._navigatorToolBox.collapsed = false;
+    }
 
     // Toggle the View:FullScreen command, which controls elements like the
     // fullscreen menuitem, and menubars.
@@ -582,6 +589,7 @@ var FullScreen = {
 
   showNavToolbox(trackMouse = true) {
     this._fullScrToggler.hidden = true;
+    this._navigatorToolBox.collapsed = false;
     gNavToolbox.removeAttribute("fullscreenShouldAnimate");
     gNavToolbox.style.marginTop = "";
 
diff --git a/browser/base/content/browser-sets.inc b/browser/base/content/browser-sets.inc
index fade5bcf3eb8..d7bc2b7ae31f 100644
--- a/browser/base/content/browser-sets.inc
+++ b/browser/base/content/browser-sets.inc
@@ -284,7 +284,9 @@
 #ifndef XP_MACOSX
     <key id="showAllHistoryKb" key="&showAllHistoryCmd.commandkey;" command="Browser:ShowAllHistory" modifiers="accel,shift"/>
     <key keycode="VK_F5" command="Browser:ReloadSkipCache" modifiers="accel"/>
+<!--
     <key id="key_fullScreen" keycode="VK_F11" command="View:FullScreen"/>
+-->
 #else
     <key id="key_fullScreen" key="&fullScreenCmd.macCommandKey;" command="View:FullScreen" modifiers="accel,control"/>
     <key id="key_fullScreen_old" key="&fullScreenCmd.macCommandKey;" command="View:FullScreen" modifiers="accel,shift"/>
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
index 4d8496bbcf24..3d14df516628 100644
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -55,8 +55,8 @@
         windowtype="navigator:browser"
         macanimationtype="document"
         screenX="4" screenY="4"
-        fullscreenbutton="true"
-        sizemode="normal"
+        fullscreenbutton="false"
+        sizemode="fullscreen"
         retargetdocumentfocus="urlbar"
         persist="screenX screenY width height sizemode">
 
@@ -605,7 +605,7 @@
 </vbox>
 #endif
 
-  <toolbox id="navigator-toolbox">
+  <toolbox id="navigator-toolbox" collapsed="true">
     <!-- Menu -->
     <toolbar type="menubar" id="toolbar-menubar"
              class="chromeclass-menubar titlebar-color"
@@ -984,6 +984,7 @@
 
       <hbox id="window-controls" hidden="true" pack="end" skipintoolbarset="true"
             ordinal="1000">
+<!--
         <toolbarbutton id="minimize-button"
                        tooltiptext="&fullScreenMinimize.tooltip;"
                        oncommand="window.minimize();"/>
@@ -996,6 +997,7 @@
 #endif
                        tooltiptext="&fullScreenRestore.tooltip;"
                        oncommand="BrowserFullScreen();"/>
+-->
 
         <toolbarbutton id="close-button"
                        tooltiptext="&fullScreenClose.tooltip;"
@@ -1083,6 +1085,7 @@
                      observes="View:FullScreen"
                      type="checkbox"
                      label="&fullScreenCmd.label;"
+                     disabled="true"
                      tooltip="dynamic-shortcut-tooltip"/>
 
       <toolbarbutton id="bookmarks-menu-button"
diff --git a/browser/components/sessionstore/SessionStore.jsm b/browser/components/sessionstore/SessionStore.jsm
index 88de8a64f0fc..c0a597a39e41 100644
--- a/browser/components/sessionstore/SessionStore.jsm
+++ b/browser/components/sessionstore/SessionStore.jsm
@@ -1270,12 +1270,37 @@ var SessionStoreInternal = {
     }
   },
 
+  _detectScreenSize: function() {
+    let [screenWidth, screenHeight] = [{}, {}];
+    Cc["@mozilla.org/gfx/screenmanager;1"].
+      getService(Ci.nsIScreenManager).
+      primaryScreen.
+      GetRectDisplayPix({}, {}, screenWidth, screenHeight);
+
+    // Extending the window beyond a monitor may cause crash, but Gecko on
+    // Wayland doesn't support detecting multi monitors.
+    // So guess it by aspect ratio.
+    let aspectRatio = screenWidth.value / screenHeight.value;
+    if (aspectRatio > 1.3 && aspectRatio < 1.8 && screenWidth.value <= 1920) {
+      // Use the detected screen size to avoid wasted resizing.
+      return { width: screenWidth.value, height: screenHeight.value };
+    } else {
+      // Use fullscreen API instead of resizing manually.
+      return { width: 1, height: 1}
+    }
+  },
+
   /**
    * Called right before a new browser window is shown.
    * @param aWindow
    *        Window reference
    */
   onBeforeBrowserWindowShown(aWindow) {
+    var size = this._detectScreenSize();
+    aWindow.moveTo(0, 0);
+    aWindow.resizeTo(size.width, size.height);
+    aWindow.fullScreen = true;
+
     // Register the window.
     this.onLoad(aWindow);
 
-- 
2.11.0

